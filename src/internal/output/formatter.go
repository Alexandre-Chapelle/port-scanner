package output

import (
	"bytes"
	"fmt"
	"html/template"
	"time"
)

type ReportData struct {
	Target    string
	Ports     []int
	Total     string
	OpenCount int
	ScanTime  string
}

const htmlTemplate = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Port Scan Results - {{.Target}}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        .info {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .info p {
            margin: 5px 0;
        }
        .ports-section {
            margin-top: 30px;
        }
        .port-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 10px;
            margin-top: 20px;
        }
        .port {
            background-color: #27ae60;
            color: white;
            padding: 10px;
            text-align: center;
            border-radius: 5px;
            font-weight: bold;
        }
        .no-ports {
            text-align: center;
            color: #e74c3c;
            font-style: italic;
            padding: 20px;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            color: #7f8c8d;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Port Scan Results</h1>
        
        <div class="info">
            <p><strong>Target:</strong> {{.Target}}</p>
            <p><strong>Scan Time:</strong> {{.ScanTime}}</p>
            <p><strong>Total Ports Scanned:</strong> {{.Total}}</p>
            <p><strong>Open Ports Found:</strong> {{.OpenCount}}</p>
        </div>

        <div class="ports-section">
            <h2>Open Ports</h2>
            {{if .Ports}}
                <div class="port-list">
                    {{range .Ports}}
                        <div class="port">{{.}}</div>
                    {{end}}
                </div>
            {{else}}
                <div class="no-ports">No open ports found</div>
            {{end}}
        </div>

        <div class="footer">
            <p>Generated by Port Scanner on {{.ScanTime}}</p>
        </div>
    </div>
</body>
</html>
`

func FormatHTML(ports []int, target string, totalPorts string, eTime time.Duration) (string, error) {
	tmpl, err := template.New("html").Parse(htmlTemplate)
	if err != nil {
		return "", err
	}

	data := ReportData{
		Target:    target,
		Ports:     ports,
		Total:     totalPorts,
		OpenCount: len(ports),
		ScanTime:  eTime.String(),
	}

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, data)
	if err != nil {
		return "", err
	}

	return buf.String(), nil
}

func FormatPlain(ports []int, target string, eTime time.Duration) string {
	result := "Port Scan Results\n"
	result += "================\n"
	result += "Target: " + target + "\n"
	result += "Scan Time: " + eTime.String() + "\n\n"
	result += "Open Ports:\n"

	if len(ports) == 0 {
		result += "No open ports found\n"
	} else {
		for _, port := range ports {
			result += "Port " + fmt.Sprintf("%d", port) + "\n"
		}
	}

	return result
}
